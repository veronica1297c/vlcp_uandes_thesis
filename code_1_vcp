#=====================================================================================
#
#  Code chunk 1
#
#=====================================================================================

# Load the WGCNA package
library(WGCNA)

#Set working directory
setwd("/Users/veronicacastaneda/Documents/WGNCA1/Test")

print("1 done")

#=====================================================================================
#
#  Code chunk 2
#
#=====================================================================================

#Input1 is the normalized gene expression data as a csv file
#The Input1.csv must look like this:
#$gene_symbol: chr "ENS..." "ENS..."
#$sample1    :num 151,00 23,00 5,00
data_expr_0 <- read.csv("input1.csv", header = TRUE, row.names = 1)
# Take a quick look at what is in the data set:
dim(data_expr_0)
names(data_expr_0)
print("2 done")
#=====================================================================================
#
#  Code chunk 3
#
#=====================================================================================

gsg <- goodSamplesGenes(data_expr_0, verbose = 10)
gsg$allOK
print("3 done")

#=====================================================================================
#
#  Code chunk 4
#
#=====================================================================================


if (!gsg$allOK) {
  if (sum(!gsg$goodGenes) > 0)
    # Optionally, print the gene and sample names that were removed:
    printFlush(paste("Removing genes:",
                     paste(rownames(data_expr_0)[!gsg$goodGenes],
                           collapse = ", ")))
  if (sum(!gsg$goodSamples) > 0)
    printFlush(paste("Removing samples:",
                     paste(colnames(data_expr_0)[!gsg$goodSamples],
                           collapse = ", ")))
  # Remove the offending genes and samples from the data:
  data_expr <- data_expr_0[gsg$goodSamples, gsg$goodGenes]
}
print("4 done")

n_genes <- ncol(data_expr)
n_samples <- nrow(data_expr)
print(n_genes)
print(n_samples)
#=====================================================================================
#
#  Code chunk 5
#
#=====================================================================================

# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
#For this plot, data is transposed using the t() function
sample_tree <- hclust(dist(t(data_expr)), method = "average")

sizeGrWindow(12, 9)
par(cex = 0.6)
par(mar = c(0, 4, 2, 0))
plot(sample_tree, main = "Sample clustering to detect outliers",
     sub = "", xlab = "", cex.lab = 1.5,
     cex.axis = 1.5, cex.main = 2)
print("5 done")

#=====================================================================================
#
#  Code chunk 6
#
#=====================================================================================


# Plot a line to show the cut
abline(h = 7e+06, col = "red")
# Determine cluster under the line

#If you want to remove the furthest samples
clust <- cutreeStatic(sample_tree, cutHeight = 7e+06, minSize = 10)
table(clust)

#If you cannot to remove the furthest samples
clust == 1

# clust 1 contains the samples we want to keep.
#Data matrix is transposed in this step
keep_samples <- (clust)
t_data <- t(data_expr)
data_expr_1 <- t_data[keep_samples, ]
n_genes <- ncol(data_expr_1)
n_samples <- nrow(data_expr_1)

print(n_genes)
print(n_samples)

head(data_expr_1)
print("6 done")
#=====================================================================
#
#  Code chunk 7
#
#=====================================================================

# Input clinical data
trait_data <- read.csv("ClinicalTraits.csv")
dim(trait_data)
names(trait_data)

# Remove columns that hold information we do not need.
all_traits <- trait_data
all_traits <- trait_data
dim(all_traits)
names(all_traits)

# Data frame analogous to expression data that will hold the clinical traits.
samples <- rownames(data_expr_1)
print(samples)

trait_rows <- match(samples, all_traits$Sample)
data_traits <- all_traits[trait_rows, -1]
rownames(data_traits) <- all_traits[trait_rows, 1]

dim(data_traits)
names(data_traits)

collectGarbage()
print("7 done")

#=====================================================================
#
#   Code chunk 8
#
#=====================================================================


# Re-cluster samples
sample_tree2 <- hclust(dist(data_expr_1), method = "average")
# Convert traits to a color representation:
#white means low, red means high, grey means missing entry
trait_colors <- numbers2colors(data_traits, signed = FALSE)
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sample_tree2, trait_colors,
                    groupLabels = names(data_traits),
                    main = "Sample dendrogram and trait heatmap")

#=====================================================================
#
#  Code chunk 9
#
#=====================================================================
#Save results

save(data_expr_1, data_traits, file = "Input2.RData")
print("9 done")
