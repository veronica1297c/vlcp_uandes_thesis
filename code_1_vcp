#=====================================================================================
#
#  Code chunk 1
#
#=====================================================================================
# Load the WGCNA package

library(WGCNA)

#Read in the Input1
#This input needs to be a .csv with expression containing decimals
#The Input1.csv must look like this:
#$gene_symbol: chr "ENS..." "ENS..."
#$sample1    :num 151,00 23,00 5,00
Data = read.csv("input1.csv",header=TRUE)

# Take a quick look at what is in the data set:
dim(Data)
names(Data)
print("1 done")

#=====================================================================================
#
#  Code chunk 2
#
#=====================================================================================

datExpr0 = as.data.frame(t(Data[, -1]))
names(datExpr0) = Data$genes
rownames(datExpr0) = names(Data)[-1]

dim(Data)
names(Data)

print("2 done")
#=====================================================================================
#
#  Code chunk 3
#
#=====================================================================================

#Iterative filtering of samples and genes with too many missing entries
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
print("3 done")
#=====================================================================================
#
#  Code chunk 4
#
#=====================================================================================

if (!gsg$allOK)
{
  # Optionally, print the gene and sample names that were removed:
  if (sum(!gsg$goodGenes)>0)
   printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
 if (sum(!gsg$goodSamples)>0)
    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  # Remove the offending genes and samples from the data:
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
print("4 done")


#=====================================================================================
#
#  Code chunk 5
#
#=====================================================================================


sampleTree = hclust(dist(datExpr0), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
     cex.axis = 1.5, cex.main = 2)
print("5 done")

#=====================================================================================
#
#  Code chunk 6
#
#=====================================================================================


# Plot a line to show the cut
abline(h = 4000000, col = "red");
# Determine cluster under the line

#If you want to remove the furthest samples
#clust = cutreeStatic(sampleTree, cutHeight = 4000000, minSize = 10)
#table(clust)

#If you cannot to remove the furthest samples
clust=1

# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
print("6 done")

#=====================================================================================
#
#  Code chunk 7
#
#=====================================================================================

# 
traitData = read.csv("ClinicalTraits.csv");
dim(traitData)
names(traitData)
# 
# # remove columns that hold information we do not need.
allTraits = traitData;
allTraits = traitData;
dim(allTraits)
names(allTraits)
# 
# # Form a data frame analogous to expression data that will hold the clinical traits.
# 
femaleSamples = rownames(datExpr0);
 traitRows = match(femaleSamples, allTraits$Sample);
 datTraits = allTraits[traitRows, -1];
 rownames(datTraits) = allTraits[traitRows, 1];

dim(datTraits)
names(datTraits)
# 
 collectGarbage();
 print("7 done")
# 
# #=====================================================================================
# #
# #  Code chunk 8
# #
# #=====================================================================================
# 
# 

# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(datTraits), 
                    main = "Sample dendrogram and trait heatmap")

#=====================================================================================
#
#  Code chunk 9
#
#=====================================================================================


save(datExpr, datTraits, file = "Input2.RData")
print("9 done")
